#include <iostream>
#include <string>
#include <map>


#include <ghl_types.h>
#include "agal_assembler.h"



COMPILER agal
	
	AGALCodeGen* m_codegen;

	AGALData::name_to_register_map m_varying_map;
	AGALData::name_to_register_map m_uniform_map;
	AGALData::name_to_register_map m_attributes_map;
	AGALData::constants_map m_constants;
	bool m_is_vertex;

	std::map<RegisterName,RegisterName> m_registers_remap;

CHARACTERS
	digit = '0' .. '9'.
	hexDigit = digit + "abcdefABCDEF".
	alpha = 'a' .. 'z'.
	alphaAll = 'a' .. 'z' + 'A' .. 'Z'.
	componets = "xyzwrgba".
	
TOKENS
	number = digit {digit} | "0x" hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit.
	floatNumber = digit {digit} '.' digit {digit}.
	newline = '\n' | "\r\n".
	identifier = alphaAll {alphaAll|digit|'_'}.
	token_vertex = "#vertex".
	token_fragment = "#fragment".
	token_attribute = "#attribute".
	token_var = "#var".
	token_uniform = "#uniform".
	token_const = "#const".
	token_sampler = "#sampler".
	k_linear = "linear".
	k_mipdisable = "mipdisable".
	k_repeat = "repeat".
	k_2d = "2d".
	
PRODUCTIONS
	agal (.m_codegen = 0;.) 
		= {line newline} (.

		.). 
	line = [directive | expression].
	directive = vertex | fragment | attribute | var | uniform | constset | sampler_def.
	vertex = token_vertex (.m_codegen = new AGALCodeGen(AGALCodeGen::VERTEX_PROGRAM); m_is_vertex = true; .).
	fragment = token_fragment (.m_codegen = new AGALCodeGen(AGALCodeGen::FRAGMENT_PROGRAM); m_is_vertex = false; .).
	attribute = (. RegisterName reg_name; std::string name; .) token_attribute directive_name<name> '=' reg<reg_name> (. 
		if (m_is_vertex) {
			AGALData::name_to_register_map::iterator it = m_attributes_map.find(name);
			if (it==m_attributes_map.end()) {
				SemErr((std::string("unknown attribute ") + name).c_str() );
				return;
			}
			if (it->second!=reg_name) {
				m_registers_remap[reg_name] = it->second;
			}
		}
		.).
	var = (. RegisterName reg_name; std::string name;.) token_var directive_name<name> '=' reg<reg_name> (.
		if (m_is_vertex) {
			m_varying_map[name] = reg_name;
		} else {
			AGALData::name_to_register_map::iterator it = m_varying_map.find(name);
			if (it==m_varying_map.end()) {
				SemErr((std::string("undefined uniform ") + name).c_str() );
				return;
			}
			if (it->second!=reg_name) {
				m_registers_remap[reg_name] = it->second;
			}
		} .).
	uniform = (. RegisterName reg_name; std::string name; .) token_uniform directive_name<name> '=' reg<reg_name> (.
		m_uniform_map[name] = reg_name; .).
	constset =  (. RegisterName reg_name; AGALData::ConstantData data;.) token_const reg<reg_name> '=' vec4<data> (. m_constants[reg_name] = data; .).
	sampler_def = (. RegisterName reg_name; std::string name; .) token_sampler directive_name<name> '=' reg<reg_name> (.
		if (reg_name.def!=&FS) {
			SemErr( "sampler register must be FS" );
			return;
		}
		static const char* prefix = "texture_";
		if (name.find(prefix)!=0) {
			SemErr( "sampler name must be 'texture_%num%'" );
			return;
		}
		size_t num = atoi(name.c_str()+strlen(prefix));
		if (num!=reg_name.idx) {
			SemErr( "sampler index invalid" );
			return;
			/// @todo remap sampler
		}
	.).
	directive_name<std::string& name> = identifier (. name = t->val; .).
	reg< RegisterName& reg_name> = identifier (.
		reg_name.def = 0;
		reg_name.idx = 0;
		if (!reg_name.parse(t->val)) {
			std::string err = std::string("unknown register '") + std::string(t->val) + "'";
			SemErr(err.c_str());
			return;
		}
	.).
	vec4<AGALData::ConstantData& data> = '{' float_value<data.data[0]> ';' float_value<data.data[1]> ';' float_value<data.data[2]> ';' float_value<data.data[3]> '}'.
	float_value<float& ret_val> = 
		  number (. 
		  	if (strlen(t->val)==10 && t->val[0]=='0' && t->val[1]=='x') {
		  		unsigned int tmp = 0;
		  		sscanf(t->val,"0x%08x",&tmp);
		  		uint32_t t32 = tmp;
		  		ret_val = *reinterpret_cast<float*>(&t32);
		  	} else {
		  		ret_val = atoi(t->val);
		  	}
		  .)
		| floatNumber (. ret_val = atof(t->val);.).
	
	expression  (. 
		if (!m_codegen) {
			SemErr("must specify program type before opcodes");
			return;
		}
		std::string opcode_name; 
		.) = SYNC code<opcode_name> (.
				const Opcode* opcode = get_opcode(opcode_name.c_str());
				if (!opcode) {
					std::string err = "unknown opcode '" + opcode_name + "'";
					SemErr(err.c_str());
					return;
				}
				std::cout << opcode->name << " ";
				RegisterName dst_reg;
				std::string dst_swizzle;
				RegisterName src1_reg;
				std::string src1_swizzle;
				RegisterName src2_reg;
				std::string src2_swizzle;
			.) 
			[
				dst<dst_reg,dst_swizzle>(.
					std::cout << dst_reg << (dst_swizzle.empty() ? "" : ".") << dst_swizzle;
				.) [
				 ',' src<src1_reg,src1_swizzle>(.
					std::cout << ", " << src1_reg << (src1_swizzle.empty() ? "" : ".") << src1_swizzle;
				.) [
				 ',' src<src2_reg,src2_swizzle>(.
					std::cout << ", " << src2_reg << (src2_swizzle.empty() ? "" : ".") << src2_swizzle;
				.) [ '<' k_linear k_mipdisable k_repeat k_2d '>' ] ] ] 
			] (.

				std::cout << std::endl;
				if (dst_reg.def) {
					Register dst(dst_reg);
					if (!dst_swizzle.empty()) dst.swizzle(dst_swizzle.c_str());
					if (src1_reg.def) {
						Register src1(src1_reg);
						if (!src1_swizzle.empty()) src1.swizzle(src1_swizzle.c_str());
						if (src2_reg.def) {
							if (src2_reg.def == &FS) {
								Sampler src2(*src2_reg.def,src2_reg.idx);
								if (!src2_swizzle.empty()) {
									SemErr("swizzle not supported on sampler");
									return;
								}
								src2.linear();
								m_codegen->add(*opcode,dst,src1,src2);
							} else {
								Register src2(src2_reg);
								if (!src2_swizzle.empty()) src2.swizzle(src2_swizzle.c_str());
								m_codegen->add(*opcode,dst,src1,src2);
							}
						} else {
							m_codegen->add(*opcode,dst,src1);
						}
					} else {
						m_codegen->add(*opcode,dst);
					}
				} else {
					m_codegen->add(*opcode);
				}
			.).
	code<std::string& name> = identifier (. name = t->val; .).
	dst<RegisterName &reg_name,std::string& swizz> = reg<reg_name> (. 
		std::map<RegisterName,RegisterName>::const_iterator it = m_registers_remap.find(reg_name);
		if (it!=m_registers_remap.end()) {
			reg_name = it->second;
		}
	.) ['.' swizzle (.swizz = t->val;.)].
	src<RegisterName &reg_name,std::string& swizz> = reg<reg_name> (. 
		std::map<RegisterName,RegisterName>::const_iterator it = m_registers_remap.find(reg_name);
		if (it!=m_registers_remap.end()) {
			reg_name = it->second;
		}
	.) ['.' swizzle (.swizz = t->val;.)].
	swizzle = identifier.
END agal.
